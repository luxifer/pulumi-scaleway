// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Gets information about multiple Load Balancer IPs.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * // Find IPs by CIDR block and zone
 * const myKey = pulumi.output(scaleway.getLbIps({
 *     ipCidrRange: "0.0.0.0/0",
 *     zone: "fr-par-2",
 * }));
 * ```
 */
export function getLbIps(args?: GetLbIpsArgs, opts?: pulumi.InvokeOptions): Promise<GetLbIpsResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("scaleway:index/getLbIps:getLbIps", {
        "ipCidrRange": args.ipCidrRange,
        "projectId": args.projectId,
        "zone": args.zone,
    }, opts);
}

/**
 * A collection of arguments for invoking getLbIps.
 */
export interface GetLbIpsArgs {
    /**
     * The IP CIDR range used as a filter. IPs within a CIDR block like it are listed.
     */
    ipCidrRange?: string;
    /**
     * The ID of the project the load-balancer is associated with.
     */
    projectId?: string;
    /**
     * `zone`) The zone in which IPs exist.
     */
    zone?: string;
}

/**
 * A collection of values returned by getLbIps.
 */
export interface GetLbIpsResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ipCidrRange?: string;
    /**
     * List of found IPs
     */
    readonly ips: outputs.GetLbIpsIp[];
    /**
     * The organization ID the load-balancer is associated with.
     */
    readonly organizationId: string;
    /**
     * The ID of the project the load-balancer is associated with.
     */
    readonly projectId: string;
    /**
     * The zone in which the load-balancer is.
     */
    readonly zone: string;
}

export function getLbIpsOutput(args?: GetLbIpsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLbIpsResult> {
    return pulumi.output(args).apply(a => getLbIps(a, opts))
}

/**
 * A collection of arguments for invoking getLbIps.
 */
export interface GetLbIpsOutputArgs {
    /**
     * The IP CIDR range used as a filter. IPs within a CIDR block like it are listed.
     */
    ipCidrRange?: pulumi.Input<string>;
    /**
     * The ID of the project the load-balancer is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `zone`) The zone in which IPs exist.
     */
    zone?: pulumi.Input<string>;
}
